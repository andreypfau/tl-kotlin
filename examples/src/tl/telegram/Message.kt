// This file is generated by TLGenerator.kt
// Do not edit manually!
package tl.telegram

import io.github.andreypfau.tl.serialization.TLCombinatorId
import io.github.andreypfau.tl.serialization.TLConditional
import kotlin.jvm.JvmName
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.JsonClassDiscriminator

@Serializable
@JsonClassDiscriminator("@type")
public sealed interface Message {
    @Serializable
    @SerialName("messageEmpty")
    @TLCombinatorId(0x90A6CA84)
    public data class MessageEmpty(
        @get:JvmName("flags")
        public val flags: Int,
        @get:JvmName("id")
        public val id: Int,
        @SerialName("peer_id")
        @TLConditional("flags", 0)
        @get:JvmName("peerId")
        public val peerId: Peer? = null,
    ) : tl.telegram.Message {
        public companion object
    }

    @Serializable
    @SerialName("message")
    @TLCombinatorId(0x38116EE0)
    public data class Message(
        @get:JvmName("flags")
        public val flags: Int,
        @TLConditional("flags", 1)
        @get:JvmName("out")
        public val `out`: Unit? = null,
        @TLConditional("flags", 4)
        @get:JvmName("mentioned")
        public val mentioned: Unit? = null,
        @SerialName("media_unread")
        @TLConditional("flags", 5)
        @get:JvmName("mediaUnread")
        public val mediaUnread: Unit? = null,
        @TLConditional("flags", 13)
        @get:JvmName("silent")
        public val silent: Unit? = null,
        @TLConditional("flags", 14)
        @get:JvmName("post")
        public val post: Unit? = null,
        @SerialName("from_scheduled")
        @TLConditional("flags", 18)
        @get:JvmName("fromScheduled")
        public val fromScheduled: Unit? = null,
        @TLConditional("flags", 19)
        @get:JvmName("legacy")
        public val legacy: Unit? = null,
        @SerialName("edit_hide")
        @TLConditional("flags", 21)
        @get:JvmName("editHide")
        public val editHide: Unit? = null,
        @TLConditional("flags", 24)
        @get:JvmName("pinned")
        public val pinned: Unit? = null,
        @TLConditional("flags", 26)
        @get:JvmName("noforwards")
        public val noforwards: Unit? = null,
        @SerialName("invert_media")
        @TLConditional("flags", 27)
        @get:JvmName("invertMedia")
        public val invertMedia: Unit? = null,
        @get:JvmName("id")
        public val id: Int,
        @SerialName("from_id")
        @TLConditional("flags", 8)
        @get:JvmName("fromId")
        public val fromId: Peer? = null,
        @SerialName("peer_id")
        @get:JvmName("peerId")
        public val peerId: Peer,
        @SerialName("fwd_from")
        @TLConditional("flags", 2)
        @get:JvmName("fwdFrom")
        public val fwdFrom: MessageFwdHeader? = null,
        @SerialName("via_bot_id")
        @TLConditional("flags", 11)
        @get:JvmName("viaBotId")
        public val viaBotId: Long? = null,
        @SerialName("reply_to")
        @TLConditional("flags", 3)
        @get:JvmName("replyTo")
        public val replyTo: MessageReplyHeader? = null,
        @get:JvmName("date")
        public val date: Int,
        @get:JvmName("message")
        public val message: String,
        @TLConditional("flags", 9)
        @get:JvmName("media")
        public val media: MessageMedia? = null,
        @SerialName("reply_markup")
        @TLConditional("flags", 6)
        @get:JvmName("replyMarkup")
        public val replyMarkup: ReplyMarkup? = null,
        @TLConditional("flags", 7)
        @get:JvmName("entities")
        public val entities: List<MessageEntity>? = null,
        @TLConditional("flags", 10)
        @get:JvmName("views")
        public val views: Int? = null,
        @TLConditional("flags", 10)
        @get:JvmName("forwards")
        public val forwards: Int? = null,
        @TLConditional("flags", 23)
        @get:JvmName("replies")
        public val replies: MessageReplies? = null,
        @SerialName("edit_date")
        @TLConditional("flags", 15)
        @get:JvmName("editDate")
        public val editDate: Int? = null,
        @SerialName("post_author")
        @TLConditional("flags", 16)
        @get:JvmName("postAuthor")
        public val postAuthor: String? = null,
        @SerialName("grouped_id")
        @TLConditional("flags", 17)
        @get:JvmName("groupedId")
        public val groupedId: Long? = null,
        @TLConditional("flags", 20)
        @get:JvmName("reactions")
        public val reactions: MessageReactions? = null,
        @SerialName("restriction_reason")
        @TLConditional("flags", 22)
        @get:JvmName("restrictionReason")
        public val restrictionReason: List<RestrictionReason>? = null,
        @SerialName("ttl_period")
        @TLConditional("flags", 25)
        @get:JvmName("ttlPeriod")
        public val ttlPeriod: Int? = null,
    ) : tl.telegram.Message {
        public companion object
    }

    @Serializable
    @SerialName("messageService")
    @TLCombinatorId(0x2B085862)
    public data class MessageService(
        @get:JvmName("flags")
        public val flags: Int,
        @TLConditional("flags", 1)
        @get:JvmName("out")
        public val `out`: Unit? = null,
        @TLConditional("flags", 4)
        @get:JvmName("mentioned")
        public val mentioned: Unit? = null,
        @SerialName("media_unread")
        @TLConditional("flags", 5)
        @get:JvmName("mediaUnread")
        public val mediaUnread: Unit? = null,
        @TLConditional("flags", 13)
        @get:JvmName("silent")
        public val silent: Unit? = null,
        @TLConditional("flags", 14)
        @get:JvmName("post")
        public val post: Unit? = null,
        @TLConditional("flags", 19)
        @get:JvmName("legacy")
        public val legacy: Unit? = null,
        @get:JvmName("id")
        public val id: Int,
        @SerialName("from_id")
        @TLConditional("flags", 8)
        @get:JvmName("fromId")
        public val fromId: Peer? = null,
        @SerialName("peer_id")
        @get:JvmName("peerId")
        public val peerId: Peer,
        @SerialName("reply_to")
        @TLConditional("flags", 3)
        @get:JvmName("replyTo")
        public val replyTo: MessageReplyHeader? = null,
        @get:JvmName("date")
        public val date: Int,
        @get:JvmName("action")
        public val action: MessageAction,
        @SerialName("ttl_period")
        @TLConditional("flags", 25)
        @get:JvmName("ttlPeriod")
        public val ttlPeriod: Int? = null,
    ) : tl.telegram.Message {
        public companion object
    }

    public companion object
}
