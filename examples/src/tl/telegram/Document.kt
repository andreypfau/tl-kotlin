// This file is generated by TLGenerator.kt
// Do not edit manually!
package tl.telegram

import io.github.andreypfau.tl.serialization.Base64ByteStringSerializer
import io.github.andreypfau.tl.serialization.TLCombinatorId
import io.github.andreypfau.tl.serialization.TLConditional
import kotlin.jvm.JvmName
import kotlinx.io.bytestring.ByteString
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.JsonClassDiscriminator

@Serializable
@JsonClassDiscriminator("@type")
public sealed interface Document {
    @Serializable
    @SerialName("documentEmpty")
    @TLCombinatorId(0x36F8C871)
    public data class DocumentEmpty(
        @get:JvmName("id")
        public val id: Long,
    ) : tl.telegram.Document {
        public companion object
    }

    @Serializable
    @SerialName("document")
    @TLCombinatorId(0x8FD4C4D8)
    public data class Document(
        @get:JvmName("flags")
        public val flags: Int,
        @get:JvmName("id")
        public val id: Long,
        @SerialName("access_hash")
        @get:JvmName("accessHash")
        public val accessHash: Long,
        @SerialName("file_reference")
        @get:JvmName("fileReference")
        public val fileReference: @Serializable(Base64ByteStringSerializer::class) ByteString,
        @get:JvmName("date")
        public val date: Int,
        @SerialName("mime_type")
        @get:JvmName("mimeType")
        public val mimeType: String,
        @get:JvmName("size")
        public val size: Long,
        @TLConditional("flags", 0)
        @get:JvmName("thumbs")
        public val thumbs: List<PhotoSize>? = null,
        @SerialName("video_thumbs")
        @TLConditional("flags", 1)
        @get:JvmName("videoThumbs")
        public val videoThumbs: List<VideoSize>? = null,
        @SerialName("dc_id")
        @get:JvmName("dcId")
        public val dcId: Int,
        @get:JvmName("attributes")
        public val attributes: List<DocumentAttribute>,
    ) : tl.telegram.Document {
        public companion object
    }

    public companion object
}
