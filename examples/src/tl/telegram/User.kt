// This file is generated by TLGenerator.kt
// Do not edit manually!
package tl.telegram

import io.github.andreypfau.tl.serialization.TLCombinatorId
import io.github.andreypfau.tl.serialization.TLConditional
import kotlin.jvm.JvmName
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.JsonClassDiscriminator

@Serializable
@JsonClassDiscriminator("@type")
public sealed interface User {
    @Serializable
    @SerialName("userEmpty")
    @TLCombinatorId(0xD3BC4B7A)
    public data class UserEmpty(
        @get:JvmName("id")
        public val id: Long,
    ) : tl.telegram.User {
        public companion object
    }

    @Serializable
    @SerialName("user")
    @TLCombinatorId(0xEB602F25)
    public data class User(
        @get:JvmName("flags")
        public val flags: Int,
        @TLConditional("flags", 10)
        @get:JvmName("self")
        public val self: Unit? = null,
        @TLConditional("flags", 11)
        @get:JvmName("contact")
        public val contact: Unit? = null,
        @SerialName("mutual_contact")
        @TLConditional("flags", 12)
        @get:JvmName("mutualContact")
        public val mutualContact: Unit? = null,
        @TLConditional("flags", 13)
        @get:JvmName("deleted")
        public val deleted: Unit? = null,
        @TLConditional("flags", 14)
        @get:JvmName("bot")
        public val bot: Unit? = null,
        @SerialName("bot_chat_history")
        @TLConditional("flags", 15)
        @get:JvmName("botChatHistory")
        public val botChatHistory: Unit? = null,
        @SerialName("bot_nochats")
        @TLConditional("flags", 16)
        @get:JvmName("botNochats")
        public val botNochats: Unit? = null,
        @TLConditional("flags", 17)
        @get:JvmName("verified")
        public val verified: Unit? = null,
        @TLConditional("flags", 18)
        @get:JvmName("restricted")
        public val restricted: Unit? = null,
        @TLConditional("flags", 20)
        @get:JvmName("min")
        public val min: Unit? = null,
        @SerialName("bot_inline_geo")
        @TLConditional("flags", 21)
        @get:JvmName("botInlineGeo")
        public val botInlineGeo: Unit? = null,
        @TLConditional("flags", 23)
        @get:JvmName("support")
        public val support: Unit? = null,
        @TLConditional("flags", 24)
        @get:JvmName("scam")
        public val scam: Unit? = null,
        @SerialName("apply_min_photo")
        @TLConditional("flags", 25)
        @get:JvmName("applyMinPhoto")
        public val applyMinPhoto: Unit? = null,
        @TLConditional("flags", 26)
        @get:JvmName("fake")
        public val fake: Unit? = null,
        @SerialName("bot_attach_menu")
        @TLConditional("flags", 27)
        @get:JvmName("botAttachMenu")
        public val botAttachMenu: Unit? = null,
        @TLConditional("flags", 28)
        @get:JvmName("premium")
        public val premium: Unit? = null,
        @SerialName("attach_menu_enabled")
        @TLConditional("flags", 29)
        @get:JvmName("attachMenuEnabled")
        public val attachMenuEnabled: Unit? = null,
        @get:JvmName("flags2")
        public val flags2: Int,
        @SerialName("bot_can_edit")
        @TLConditional("flags2", 1)
        @get:JvmName("botCanEdit")
        public val botCanEdit: Unit? = null,
        @SerialName("close_friend")
        @TLConditional("flags2", 2)
        @get:JvmName("closeFriend")
        public val closeFriend: Unit? = null,
        @SerialName("stories_hidden")
        @TLConditional("flags2", 3)
        @get:JvmName("storiesHidden")
        public val storiesHidden: Unit? = null,
        @SerialName("stories_unavailable")
        @TLConditional("flags2", 4)
        @get:JvmName("storiesUnavailable")
        public val storiesUnavailable: Unit? = null,
        @get:JvmName("id")
        public val id: Long,
        @SerialName("access_hash")
        @TLConditional("flags", 0)
        @get:JvmName("accessHash")
        public val accessHash: Long? = null,
        @SerialName("first_name")
        @TLConditional("flags", 1)
        @get:JvmName("firstName")
        public val firstName: String? = null,
        @SerialName("last_name")
        @TLConditional("flags", 2)
        @get:JvmName("lastName")
        public val lastName: String? = null,
        @TLConditional("flags", 3)
        @get:JvmName("username")
        public val username: String? = null,
        @TLConditional("flags", 4)
        @get:JvmName("phone")
        public val phone: String? = null,
        @TLConditional("flags", 5)
        @get:JvmName("photo")
        public val photo: UserProfilePhoto? = null,
        @TLConditional("flags", 6)
        @get:JvmName("status")
        public val status: UserStatus? = null,
        @SerialName("bot_info_version")
        @TLConditional("flags", 14)
        @get:JvmName("botInfoVersion")
        public val botInfoVersion: Int? = null,
        @SerialName("restriction_reason")
        @TLConditional("flags", 18)
        @get:JvmName("restrictionReason")
        public val restrictionReason: List<RestrictionReason>? = null,
        @SerialName("bot_inline_placeholder")
        @TLConditional("flags", 19)
        @get:JvmName("botInlinePlaceholder")
        public val botInlinePlaceholder: String? = null,
        @SerialName("lang_code")
        @TLConditional("flags", 22)
        @get:JvmName("langCode")
        public val langCode: String? = null,
        @SerialName("emoji_status")
        @TLConditional("flags", 30)
        @get:JvmName("emojiStatus")
        public val emojiStatus: EmojiStatus? = null,
        @TLConditional("flags2", 0)
        @get:JvmName("usernames")
        public val usernames: List<Username>? = null,
        @SerialName("stories_max_id")
        @TLConditional("flags2", 5)
        @get:JvmName("storiesMaxId")
        public val storiesMaxId: Int? = null,
        @TLConditional("flags2", 7)
        @get:JvmName("color")
        public val color: Int? = null,
        @SerialName("background_emoji_id")
        @TLConditional("flags2", 6)
        @get:JvmName("backgroundEmojiId")
        public val backgroundEmojiId: Long? = null,
    ) : tl.telegram.User {
        public companion object
    }

    public companion object
}
