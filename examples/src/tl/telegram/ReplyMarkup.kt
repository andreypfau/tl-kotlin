// This file is generated by TLGenerator.kt
// Do not edit manually!
package tl.telegram

import io.github.andreypfau.tl.serialization.TLCombinatorId
import io.github.andreypfau.tl.serialization.TLConditional
import kotlin.jvm.JvmName
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.JsonClassDiscriminator

@Serializable
@JsonClassDiscriminator("@type")
public sealed interface ReplyMarkup {
    @Serializable
    @SerialName("replyKeyboardHide")
    @TLCombinatorId(0xA03E5B85)
    public data class ReplyKeyboardHide(
        @get:JvmName("flags")
        public val flags: Int,
        @TLConditional("flags", 2)
        @get:JvmName("selective")
        public val selective: Unit? = null,
    ) : ReplyMarkup {
        public companion object
    }

    @Serializable
    @SerialName("replyKeyboardForceReply")
    @TLCombinatorId(0x86B40B08)
    public data class ReplyKeyboardForceReply(
        @get:JvmName("flags")
        public val flags: Int,
        @SerialName("single_use")
        @TLConditional("flags", 1)
        @get:JvmName("singleUse")
        public val singleUse: Unit? = null,
        @TLConditional("flags", 2)
        @get:JvmName("selective")
        public val selective: Unit? = null,
        @TLConditional("flags", 3)
        @get:JvmName("placeholder")
        public val placeholder: String? = null,
    ) : ReplyMarkup {
        public companion object
    }

    @Serializable
    @SerialName("replyKeyboardMarkup")
    @TLCombinatorId(0x85DD99D1)
    public data class ReplyKeyboardMarkup(
        @get:JvmName("flags")
        public val flags: Int,
        @TLConditional("flags", 0)
        @get:JvmName("resize")
        public val resize: Unit? = null,
        @SerialName("single_use")
        @TLConditional("flags", 1)
        @get:JvmName("singleUse")
        public val singleUse: Unit? = null,
        @TLConditional("flags", 2)
        @get:JvmName("selective")
        public val selective: Unit? = null,
        @TLConditional("flags", 4)
        @get:JvmName("persistent")
        public val persistent: Unit? = null,
        @get:JvmName("rows")
        public val rows: List<KeyboardButtonRow>,
        @TLConditional("flags", 3)
        @get:JvmName("placeholder")
        public val placeholder: String? = null,
    ) : ReplyMarkup {
        public companion object
    }

    @Serializable
    @SerialName("replyInlineMarkup")
    @TLCombinatorId(0x48A30254)
    public data class ReplyInlineMarkup(
        @get:JvmName("rows")
        public val rows: List<KeyboardButtonRow>,
    ) : ReplyMarkup {
        public companion object
    }

    public companion object
}
